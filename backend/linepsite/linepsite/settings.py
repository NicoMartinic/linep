"""
Django settings for linepsite project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import psycopg2
from getenv import env
from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

SCHEME = env('SCHEME')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG') == "true"

ALLOWED_HOSTS = env('ALLOWED_HOSTS').split(",")

FRONT_URL = env('FRONT_URL')

# Application definition

CELERY_BROKER_URL = "redis://redis:6379"
CELERY_RESULT_BACKEND = "redis://redis:6379"

CELERY_BEAT_SCHEDULE = { # scheduler configuration
    'Migrate data from SQL to ES' : {  # whatever the name you want 
        'task': 'backend.tasks.migrate_from_sql_to_ES', # name of task with path
        'schedule': 30, # 30 runs this task every 30 seconds
        'kwargs': {'task_name': 'migrate'}
    },
    'Copy pending files from queue' : {  # whatever the name you want 
        'task': 'backend.tasks.copy_pending_files', # name of task with path
        'schedule': 30, # 30 runs this task every 30 seconds
        'kwargs': {'task_name': 'copy'}
    },
    'Transcript pending files from queue' : {  # whatever the name you want 
        'task': 'backend.tasks.transcript_files', # name of task with path
        'schedule': 30, # 30 runs this task every 30 seconds
        'kwargs': {'task_name': 'transcript'}
    }
}

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'backend',
    'rest_framework',
    'corsheaders',
    #'rest_framework.authtoken',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'linepsite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'linepsite.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': env('DATABASE_NAME'), 
        'USER': env('DATABASE_USER'), 
        'PASSWORD': env('DATABASE_PASSWORD'),
        'HOST': env('DATABASE_HOST'), 
        'PORT': '5432',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/static/'

TOKEN_EXPIRED_AFTER_SECONDS = 43200
#TOKEN_EXPIRED_AFTER_SECONDS = 43200 # equivale a 12 horas

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
#        'rest_framework.authentication.TokenAuthentication',
        'backend.authentication.ExpiringTokenAuthentication',
    ],
}

# TODO: Esto deber√≠a estar en false y poner los origins correspondientes:
#CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = env('FRONT_URL').split(",") # [ env('CORS_ORIGIN_WHITELIST') ]

CORS_ALLOW_HEADERS = list(default_headers) + [
    'Size',
]

AUTH_USER_MODEL = 'backend.CustomUser'

ROLE_MANAGEMENT = 'ADMINISTRATOR'
ROLE_USER = 'USER'

MODULES_ACTIONS_PERMISSIONS = {

    #SECRETARIA ADMINISTRATIVA y VISOR

    'CREATE_ROOM': [ROLE_MANAGEMENT, ROLE_USER],
    'VIEW_ROOMS': [ROLE_MANAGEMENT, ROLE_USER],
    'EDIT_ROOM': [ROLE_MANAGEMENT, ROLE_USER],
    
}

MODULES = [
    {
        'name': 'Home',
        'url': 'home',
        'groups':  [ROLE_MANAGEMENT, ROLE_USER],
        'submodules': []
    },
    {
        'name': 'Rooms',
        'groups':  [ROLE_MANAGEMENT, ROLE_USER],
        'url': 'rooms',
        'submodules': [
            {
                'name': 'History',
                'url': 'history',
                'groups':  [ROLE_MANAGEMENT, ROLE_USER],
                'submodules': []
            },
            {
                'name': 'Search',
                'url': 'search',
                'groups':  [ROLE_MANAGEMENT, ROLE_USER],
                'submodules': [],
            },
            {
                'name': 'Create',
                'url': 'create',
                'groups':  [ROLE_MANAGEMENT, ROLE_USER],
                'submodules': [],
            },
        ]
    }
]

ENV = env('ENV')